import { NextRequest, NextResponse } from 'next/server';
import { findUserByEmail, updateUserPassword } from '@/lib/auth/airtable-service';
import { z } from 'zod';

// Schema de validaci칩n para reset de contrase침a
const resetPasswordSchema = z.object({
  email: z.string().email('Email inv치lido')
});

/**
 * Generar contrase침a aleatoria segura
 */
function generateSecurePassword(): string {
  const length = 12;
  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const lowercase = 'abcdefghijklmnopqrstuvwxyz';
  const numbers = '0123456789';
  const symbols = '@$!%*?&';
  
  const allChars = uppercase + lowercase + numbers + symbols;
  
  let password = '';
  
  // Asegurar que tenga al menos uno de cada tipo
  password += uppercase[Math.floor(Math.random() * uppercase.length)];
  password += lowercase[Math.floor(Math.random() * lowercase.length)];
  password += numbers[Math.floor(Math.random() * numbers.length)];
  password += symbols[Math.floor(Math.random() * symbols.length)];
  
  // Completar el resto de la longitud
  for (let i = 4; i < length; i++) {
    password += allChars[Math.floor(Math.random() * allChars.length)];
  }
  
  // Mezclar la contrase침a
  return password.split('').sort(() => Math.random() - 0.5).join('');
}

export async function POST(request: NextRequest) {
  try {
    // Validar datos del request
    const body = await request.json();
    const validatedData = resetPasswordSchema.parse(body);

    console.log('[RESET PASSWORD] Solicitud para email:', validatedData.email);

    // Buscar usuario por email
    const user = await findUserByEmail(validatedData.email);
    
    if (!user) {
      // Por seguridad, no revelamos si el usuario existe o no
      console.log('[RESET PASSWORD] Usuario no encontrado:', validatedData.email);
      return NextResponse.json({
        success: true,
        message: 'Si el email existe, recibir치s instrucciones para restablecer tu contrase침a'
      });
    }

    if (!user.activo) {
      console.log('[RESET PASSWORD] Usuario inactivo:', validatedData.email);
      return NextResponse.json({
        success: true,
        message: 'Si el email existe, recibir치s instrucciones para restablecer tu contrase침a'
      });
    }

    // Generar nueva contrase침a temporal
    const newPassword = generateSecurePassword();
    console.log('[RESET PASSWORD] Nueva contrase침a generada para:', validatedData.email);

    // Actualizar contrase침a en la base de datos
    const success = await updateUserPassword(user.id, newPassword);

    if (!success) {
      console.error('[RESET PASSWORD] Error al actualizar contrase침a para:', validatedData.email);
      return NextResponse.json({
        success: false,
        error: 'Error interno. Int칠ntalo de nuevo m치s tarde.'
      }, { status: 500 });
    }

    console.log('[RESET PASSWORD] Contrase침a actualizada exitosamente para:', validatedData.email);

    // En un entorno de producci칩n real, aqu칤 enviar칤as un email
    // Por ahora, mostraremos la contrase침a en la consola para desarrollo
    console.log('='.repeat(60));
    console.log('游댏 NUEVA CONTRASE칌A GENERADA:');
    console.log(`游녻 Usuario: ${user.email}`);
    console.log(`游댐 Nueva contrase침a: ${newPassword}`);
    console.log('丘멆잺  NOTA: En producci칩n esto se enviar칤a por email');
    console.log('='.repeat(60));

    // Simular env칤o de email (en desarrollo solo registramos)
    try {
      // Aqu칤 ir칤a la l칩gica de env칤o de email
      // await sendPasswordResetEmail(user.email, newPassword);
      
      console.log('[RESET PASSWORD] Email "enviado" (simulado) a:', validatedData.email);
    } catch (emailError) {
      console.error('[RESET PASSWORD] Error simulando env칤o de email:', emailError);
    }

    return NextResponse.json({
      success: true,
      message: 'Si el email existe, recibir치s instrucciones para restablecer tu contrase침a',
      // En desarrollo, incluimos la contrase침a para testing
      ...(process.env.NODE_ENV === 'development' && {
        dev_info: {
          email: user.email,
          new_password: newPassword,
          message: 'Esta informaci칩n solo se muestra en desarrollo'
        }
      })
    });

  } catch (error) {
    console.error('[RESET PASSWORD] Error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({
        success: false,
        error: 'Email inv치lido',
        details: error.errors
      }, { status: 400 });
    }

    return NextResponse.json({
      success: false,
      error: 'Error interno del servidor'
    }, { status: 500 });
  }
} 